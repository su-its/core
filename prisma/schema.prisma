datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Member {
  id            String           @id @default(uuid())
  name          String
  studentId     String          @map("student_id")
  department    String
  email         String          @unique
  personalEmail String?         @map("personal_email")
  // リレーション
  discordAccounts DiscordAccount[]
  events        MemberEvent[]
  exhibits      MemberExhibit[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("members")
}

model DiscordAccount {
  id        String   @id @map("discord_id")  // DiscordIDをプライマリーキーとして使用
  nickName  String   @map("nick_name")
  memberId  String   @map("member_id")
  member    Member   @relation(fields: [memberId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("discord_accounts")
}

model Event {
  id        String        @id @default(uuid())
  name      String
  date      DateTime
  // リレーション
  members   MemberEvent[]
  exhibits  Exhibit[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("events")
}

model Exhibit {
  id          String          @id @default(uuid())
  name        String
  description String?
  markdownContent String?     @map("markdown_content")
  url         String?
  // リレーション
  eventId     String         @map("event_id")
  event       Event          @relation(fields: [eventId], references: [id])
  members     MemberExhibit[]

  // 必要だがアクセスしない関係として定義
  lightningTalk LightningTalk?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("exhibits")
}

// イベント中のLT
model LightningTalk {
  exhibitId   String   @id @map("exhibit_id")    // PKかつFKとして使用
  exhibit     Exhibit  @relation(fields: [exhibitId], references: [id])
  startTime   DateTime @map("start_time")
  duration    Int      // 分単位
  slideUrl    String?  @map("slide_url")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lightning_talks")
}

// ジャンクションテーブル（Member - Event）
model MemberEvent {
  id        String   @id @default(uuid())
  memberId  String   @map("member_id")
  eventId   String   @map("event_id")
  member    Member   @relation(fields: [memberId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([memberId, eventId])
  @@map("member_events")
}

// ジャンクションテーブル（Member - Exhibit）
model MemberExhibit {
  id        String   @id @default(uuid())
  memberId  String   @map("member_id")
  exhibitId String   @map("exhibit_id")
  member    Member   @relation(fields: [memberId], references: [id])
  exhibit   Exhibit  @relation(fields: [exhibitId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([memberId, exhibitId])
  @@map("member_exhibits")
}
